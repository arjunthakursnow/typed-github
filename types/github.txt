class Events {
    id: String
    type: String
    actor: Actor
    repo: Repo
    payload: Payload
    public: Bool
    createdAt: DateTime
    org?: Actor
}

class Actor {
    id: Int
    login: String
    displayLogin?: String
    gravatarID: GravatarID
    url: String
    avatarURL: String
}

class Payload {
    action?: String
    issue?: Issue
    comment?: Comment
    pushID?: Int
    size?: Int
    distinctSize?: Int
    ref?: Maybe<String>
    head?: String
    before?: String
    commits?: List<Commit>
    refType?: String
    masterBranch?: String
    description?: Maybe<String>
    pusherType?: String
    forkee?: Forkee
    pages?: List<Page>
}

class Comment {
    url: String
    htmlURL: String
    issueURL: String
    id: Int
    user: User
    createdAt: DateTime
    updatedAt: DateTime
    authorAssociation: String
    body: String
}

class User {
    login: String
    id: Int
    avatarURL: String
    gravatarID: GravatarID
    url: String
    htmlURL: String
    followersURL: String
    followingURL: String
    gistsURL: String
    starredURL: String
    subscriptionsURL: String
    organizationsURL: String
    reposURL: String
    eventsURL: String
    receivedEventsURL: String
    type: UserType
    siteAdmin: Bool
}

class Commit {
    sha: String
    author: Author
    message: String
    distinct: Bool
    url: String
}

class Author {
    email: String
    name: String
}

class Forkee {
    id: Int
    name: String
    fullName: String
    owner: User
    private: Bool
    htmlURL: String
    description: String
    fork: Bool
    url: String
    forksURL: String
    keysURL: String
    collaboratorsURL: String
    teamsURL: String
    hooksURL: String
    issueEventsURL: String
    eventsURL: String
    assigneesURL: String
    branchesURL: String
    tagsURL: String
    blobsURL: String
    gitTagsURL: String
    gitRefsURL: String
    treesURL: String
    statusesURL: String
    languagesURL: String
    stargazersURL: String
    contributorsURL: String
    subscribersURL: String
    subscriptionURL: String
    commitsURL: String
    gitCommitsURL: String
    commentsURL: String
    issueCommentURL: String
    contentsURL: String
    compareURL: String
    mergesURL: String
    archiveURL: String
    downloadsURL: String
    issuesURL: String
    pullsURL: String
    milestonesURL: String
    notificationsURL: String
    labelsURL: String
    releasesURL: String
    deploymentsURL: String
    createdAt: DateTime
    updatedAt: DateTime
    pushedAt: DateTime
    gitURL: String
    sshURL: String
    cloneURL: String
    svnURL: String
    homepage: String
    size: Int
    stargazersCount: Int
    watchersCount: Int
    language: Null
    hasIssues: Bool
    hasProjects: Bool
    hasDownloads: Bool
    hasWiki: Bool
    hasPages: Bool
    forksCount: Int
    mirrorURL: Null
    archived: Bool
    openIssuesCount: Int
    license: Null
    forks: Int
    openIssues: Int
    watchers: Int
    defaultBranch: String
    public: Bool
}

class Issue {
    url: String
    repositoryURL: String
    labelsURL: String
    commentsURL: String
    eventsURL: String
    htmlURL: String
    id: Int
    number: Int
    title: String
    user: User
    labels: List<Label>
    state: String
    locked: Bool
    assignee: Null
    assignees: List<Any>
    milestone: Null
    comments: Int
    createdAt: DateTime
    updatedAt: DateTime
    closedAt: Maybe<DateTime>
    authorAssociation: String
    pullRequest?: PullRequest
    body: String
}

class Label {
    id: Int
    url: String
    name: String
    color: String
    default: Bool
}

class PullRequest {
    url: String
    htmlURL: String
    diffURL: String
    patchURL: String
}

class Page {
    pageName: String
    title: String
    summary: Null
    action: String
    sha: String
    htmlURL: String
}

class Repo {
    id: Int
    name: String
    url: String
}

class Gists {
    url: String
    forksURL: String
    commitsURL: String
    id: String
    gitPullURL: String
    gitPushURL: String
    htmlURL: String
    files: Map<String, File>
    public: Bool
    createdAt: DateTime
    updatedAt: DateTime
    description: Maybe<String>
    comments: Int
    user: Null
    commentsURL: String
    truncated: Bool
    owner?: User
}

class File {
    filename: String
    type: FileType
    language: Maybe<String>
    rawURL: String
    size: Int
}

class Meta {
    verifiablePasswordAuthentication: Bool
    githubServicesSHA: String
    hooks: List<String>
    git: List<String>
    pages: List<String>
    importer: List<String>
}

enum GravatarID = Empty

enum UserType = Bot | User

enum FileType = ApplicationJSON | ApplicationJavascript | ApplicationXML | TextHTML | TextPlain | TextXYAML
